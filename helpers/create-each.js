//   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó
//  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
//  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
//  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù      ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë
//  ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
//   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
//
//   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó
//  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë
//  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë        ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë
//  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë        ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë
//  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë
//  ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù
//

module.exports = require('machine').build({
  friendlyName: 'Create Each',

  description: 'Insert multiple records into a table in the database.',

  inputs: {
    datastore: {
      description: 'The datastore to use for connections.',
      extendedDescription:
        'Datastores represent the config and manager required to obtain an active database connection.',
      required: true,
      readOnly: true,
      example: '===',
    },

    models: {
      description:
        'An object containing all of the model definitions that have been registered.',
      required: true,
      example: '===',
    },

    query: {
      description: 'A valid stage three Waterline query.',
      required: true,
      example: '===',
    },
  },

  exits: {
    success: {
      description: 'The record was successfully inserted.',
      outputVariableName: 'record',
      outputExample: '===',
    },

    invalidDatastore: {
      description: 'The datastore used is invalid. It is missing key pieces.',
    },

    badConnection: {
      friendlyName: 'Bad connection',
      description:
        'A connection either could not be obtained or there was an error using the connection.',
    },

    notUnique: {
      friendlyName: 'Not Unique',
      outputExample: '===',
    },
  },

  fn: async function create(inputs, exits) {
    const { query } = inputs;
    // Dependencies
    const _ = require('@sailshq/lodash');
    const Helpers = require('./private');

    // Store the Query input for easier access
    query.meta = query.meta || {};

    // Find the model definition

    const WLModel = inputs.models[query.using];

    if (!WLModel) {
      return exits.invalidDatastore();
    }

    // Grab the pk column name (for use below)
    let pkColumnName;
    try {
      pkColumnName = WLModel.attributes[WLModel.primaryKey].columnName;
    } catch (e) {
      return exits.error(e);
    }

    // Set a flag to determine if records are being returned
    let fetchRecords = false;

    //  ‚ïî‚ïê‚ïó‚ï¶‚ïê‚ïó‚ïî‚ïê‚ïó  ‚ïî‚ïê‚ïó‚ï¶‚ïê‚ïó‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó  ‚î¨‚îÄ‚îê‚îå‚îÄ‚îê‚îå‚îÄ‚îê‚îå‚îÄ‚îê‚î¨‚îÄ‚îê‚îå‚î¨‚îê‚îå‚îÄ‚îê
    //  ‚ï†‚ïê‚ïù‚ï†‚ï¶‚ïù‚ïë‚ï£‚îÄ‚îÄ‚îÄ‚ï†‚ïê‚ïù‚ï†‚ï¶‚ïù‚ïë ‚ïë‚ïë  ‚ïë‚ï£ ‚ïö‚ïê‚ïó‚ïö‚ïê‚ïó  ‚îú‚î¨‚îò‚îú‚î§ ‚îÇ  ‚îÇ ‚îÇ‚îú‚î¨‚îò ‚îÇ‚îÇ‚îî‚îÄ‚îê
    //  ‚ï©  ‚ï©‚ïö‚ïê‚ïö‚ïê‚ïù  ‚ï©  ‚ï©‚ïö‚ïê‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚î¥‚îî‚îÄ‚îî‚îÄ‚îò‚îî‚îÄ‚îò‚îî‚îÄ‚îò‚î¥‚îî‚îÄ‚îÄ‚î¥‚îò‚îî‚îÄ‚îò
    // Process each record to normalize output
    let newrecords = query.newRecords;

    try {
      newrecords = Helpers.query.preProcessRecord({
        records: newrecords,
        identity: WLModel.identity,
        model: WLModel,
      });
    } catch (e) {
      return exits.error(e);
    }

    //  ‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó‚ïî‚ïó‚ïî‚ï¶  ‚ï¶‚ïî‚ïê‚ïó‚ï¶‚ïê‚ïó‚ïî‚ï¶‚ïó  ‚îå‚î¨‚îê‚îå‚îÄ‚îê  ‚îå‚îÄ‚îê‚îå‚î¨‚îê‚îå‚îÄ‚îê‚îå‚î¨‚îê‚îå‚îÄ‚îê‚îå‚î¨‚îê‚îå‚îÄ‚îê‚îå‚îê‚îå‚îå‚î¨‚îê
    //  ‚ïë  ‚ïë ‚ïë‚ïë‚ïë‚ïë‚ïö‚ïó‚ïî‚ïù‚ïë‚ï£ ‚ï†‚ï¶‚ïù ‚ïë    ‚îÇ ‚îÇ ‚îÇ  ‚îî‚îÄ‚îê ‚îÇ ‚îú‚îÄ‚î§ ‚îÇ ‚îú‚î§ ‚îÇ‚îÇ‚îÇ‚îú‚î§ ‚îÇ‚îÇ‚îÇ ‚îÇ
    //  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïù‚ïö‚ïù ‚ïö‚ïù ‚ïö‚ïê‚ïù‚ï©‚ïö‚ïê ‚ï©    ‚î¥ ‚îî‚îÄ‚îò  ‚îî‚îÄ‚îò ‚î¥ ‚î¥ ‚î¥ ‚î¥ ‚îî‚îÄ‚îò‚î¥ ‚î¥‚îî‚îÄ‚îò‚îò‚îî‚îò ‚î¥
    // Convert the Waterline criteria into a Waterline Query Statement. This
    // turns it into something that is declarative and can be easily used to
    // build a SQL query.
    // See: https://github.com/treelinehq/waterline-query-docs for more info
    // on Waterline Query Statements.

    let statement;
    try {
      statement = Helpers.query.compileStatement({
        pkColumnName,
        model: query.using,
        method: 'createEach',
        values: newrecords,
      });
    } catch (e) {
      return exits.error(e);
    }

    //  ‚ïî‚ï¶‚ïó‚ïî‚ïê‚ïó‚ïî‚ï¶‚ïó‚ïî‚ïê‚ïó‚ï¶‚ïê‚ïó‚ïî‚ï¶‚ïó‚ï¶‚ïî‚ïó‚ïî‚ïî‚ïê‚ïó  ‚î¨ ‚î¨‚î¨ ‚î¨‚î¨‚îå‚îÄ‚îê‚î¨ ‚î¨  ‚î¨  ‚î¨‚îå‚îÄ‚îê‚î¨  ‚î¨ ‚î¨‚îå‚îÄ‚îê‚îå‚îÄ‚îê
    //   ‚ïë‚ïë‚ïë‚ï£  ‚ïë ‚ïë‚ï£ ‚ï†‚ï¶‚ïù‚ïë‚ïë‚ïë‚ïë‚ïë‚ïë‚ïë‚ïë‚ï£   ‚îÇ‚îÇ‚îÇ‚îú‚îÄ‚î§‚îÇ‚îÇ  ‚îú‚îÄ‚î§  ‚îî‚îê‚îå‚îò‚îú‚îÄ‚î§‚îÇ  ‚îÇ ‚îÇ‚îú‚î§ ‚îî‚îÄ‚îê
    //  ‚ïê‚ï©‚ïù‚ïö‚ïê‚ïù ‚ï© ‚ïö‚ïê‚ïù‚ï©‚ïö‚ïê‚ï© ‚ï©‚ï©‚ïù‚ïö‚ïù‚ïö‚ïê‚ïù  ‚îî‚î¥‚îò‚î¥ ‚î¥‚î¥‚îî‚îÄ‚îò‚î¥ ‚î¥   ‚îî‚îò ‚î¥ ‚î¥‚î¥‚îÄ‚îò‚îî‚îÄ‚îò‚îî‚îÄ‚îò‚îî‚îÄ‚îò
    //  ‚îå‚î¨‚îê‚îå‚îÄ‚îê  ‚î¨‚îÄ‚îê‚îå‚îÄ‚îê‚îå‚î¨‚îê‚î¨ ‚î¨‚î¨‚îÄ‚îê‚îå‚îê‚îå
    //   ‚îÇ ‚îÇ ‚îÇ  ‚îú‚î¨‚îò‚îú‚î§  ‚îÇ ‚îÇ ‚îÇ‚îú‚î¨‚îò‚îÇ‚îÇ‚îÇ
    //   ‚î¥ ‚îî‚îÄ‚îò  ‚î¥‚îî‚îÄ‚îî‚îÄ‚îò ‚î¥ ‚îî‚îÄ‚îò‚î¥‚îî‚îÄ‚îò‚îî‚îò
    if (_.has(query.meta, 'fetch') && query.meta.fetch) {
      fetchRecords = true;
    }

    //  ‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó‚ï¶ ‚ï¶‚ïî‚ïó‚ïî  ‚îå‚îÄ‚îê‚îå‚îÄ‚îê‚îå‚îê‚îå‚îå‚îê‚îå‚îå‚îÄ‚îê‚îå‚îÄ‚îê‚îå‚î¨‚îê‚î¨‚îå‚îÄ‚îê‚îå‚îê‚îå
    //  ‚ïö‚ïê‚ïó‚ï†‚ïê‚ïù‚ï†‚ïê‚ï£‚ïë‚ïë‚ïë‚ïë‚ïë‚ïë  ‚îÇ  ‚îÇ ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ‚îú‚î§ ‚îÇ   ‚îÇ ‚îÇ‚îÇ ‚îÇ‚îÇ‚îÇ‚îÇ
    //  ‚ïö‚ïê‚ïù‚ï©  ‚ï© ‚ï©‚ïö‚ï©‚ïù‚ïù‚ïö‚ïù  ‚îî‚îÄ‚îò‚îî‚îÄ‚îò‚îò‚îî‚îò‚îò‚îî‚îò‚îî‚îÄ‚îò‚îî‚îÄ‚îò ‚î¥ ‚î¥‚îî‚îÄ‚îò‚îò‚îî‚îò
    //  ‚îå‚îÄ‚îê‚î¨‚îÄ‚îê  ‚î¨ ‚î¨‚îå‚îÄ‚îê‚îå‚îÄ‚îê  ‚î¨  ‚îå‚îÄ‚îê‚îå‚îÄ‚îê‚îå‚îÄ‚îê‚îå‚îÄ‚îê‚îå‚î¨‚îê  ‚îå‚îÄ‚îê‚îå‚îÄ‚îê‚îå‚îê‚îå‚îå‚îê‚îå‚îå‚îÄ‚îê‚îå‚îÄ‚îê‚îå‚î¨‚îê‚î¨‚îå‚îÄ‚îê‚îå‚îê‚îå
    //  ‚îÇ ‚îÇ‚îú‚î¨‚îò  ‚îÇ ‚îÇ‚îî‚îÄ‚îê‚îú‚î§   ‚îÇ  ‚îú‚î§ ‚îú‚îÄ‚î§‚îî‚îÄ‚îê‚îú‚î§  ‚îÇ‚îÇ  ‚îÇ  ‚îÇ ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ‚îÇ‚îú‚î§ ‚îÇ   ‚îÇ ‚îÇ‚îÇ ‚îÇ‚îÇ‚îÇ‚îÇ
    //  ‚îî‚îÄ‚îò‚î¥‚îî‚îÄ  ‚îî‚îÄ‚îò‚îî‚îÄ‚îò‚îî‚îÄ‚îò  ‚î¥‚îÄ‚îò‚îî‚îÄ‚îò‚î¥ ‚î¥‚îî‚îÄ‚îò‚îî‚îÄ‚îò‚îÄ‚î¥‚îò  ‚îî‚îÄ‚îò‚îî‚îÄ‚îò‚îò‚îî‚îò‚îò‚îî‚îò‚îî‚îÄ‚îò‚îî‚îÄ‚îò ‚î¥ ‚î¥‚îî‚îÄ‚îò‚îò‚îî‚îò
    // Spawn a new connection for running queries on.

    const {
      dbConnection,
      graph,
      graphEnabled,
    } = Helpers.connection.getConnection(inputs.datastore, query.meta);

    let collections = [];
    let collection;
    let result;

    try {
      if (graphEnabled) {
        collections = await graph.listVertexCollections();
      }

      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      // construct the query statement or better use the Query constructor üëçüèΩ
      // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

      // const sql = aql`FOR record IN ${statement.values} INSERT record INTO ${
      //   statement.tableName
      // }`;

      // result = await dbConnection.query(sql);

      if (_.includes(collections, statement.tableName)) {
        // This is a graph member!

        collection = graph.vertexCollection(`${statement.tableName}`);

        if (WLModel.classType === 'Edge') {
          collection = graph.edgeCollection(`${statement.tableName}`);
        }

        console.log('====================================');
        console.log('st', statement.values);
        console.log('====================================');

        const results = [...(statement.values || [])].map(
          value => new Promise(async (resolve) => {
            const record = await collection.save(value);
            resolve({ new: record });
          }),
        );

        result = await Promise.all(results);
      } else {
        collection = dbConnection.collection(`${statement.tableName}`);

        if (WLModel.classType === 'Edge') {
          collection = dbConnection.edgeCollection(`${statement.tableName}`);
        }
        const opts = { returnNew: fetchRecords, overwrite: true };

        result = await collection.save(statement.values, opts);
      }
    } catch (error) {
      if (dbConnection) {
        Helpers.connection.releaseConnection(dbConnection);
      }
      return exits.error(error);
    }

    // If `fetch` is NOT enabled, we're done.

    if (!fetchRecords) {
      Helpers.connection.releaseConnection(dbConnection);
      return exits.success();
    }

    // Otherwise, IWMIH we'll be sending back records:
    // ============================================

    //  ‚ïî‚ïê‚ïó‚ï¶‚ïê‚ïó‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó‚ïî‚ïê‚ïó  ‚îå‚îê‚îå‚îå‚îÄ‚îê‚îå‚î¨‚îê‚î¨‚î¨  ‚î¨‚îå‚îÄ‚îê  ‚î¨‚îÄ‚îê‚îå‚îÄ‚îê‚îå‚îÄ‚îê‚îå‚îÄ‚îê‚î¨‚îÄ‚îê‚îå‚î¨‚îê‚îå‚îÄ‚îå‚îÄ‚îê‚îÄ‚îê
    //  ‚ï†‚ïê‚ïù‚ï†‚ï¶‚ïù‚ïë ‚ïë‚ïë  ‚ïë‚ï£ ‚ïö‚ïê‚ïó‚ïö‚ïê‚ïó  ‚îÇ‚îÇ‚îÇ‚îú‚îÄ‚î§ ‚îÇ ‚îÇ‚îî‚îê‚îå‚îò‚îú‚î§   ‚îú‚î¨‚îò‚îú‚î§ ‚îÇ  ‚îÇ ‚îÇ‚îú‚î¨‚îò ‚îÇ‚îÇ‚îÇ ‚îî‚îÄ‚îê ‚îÇ
    //  ‚ï©  ‚ï©‚ïö‚ïê‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚îò‚îî‚îò‚î¥ ‚î¥ ‚î¥ ‚î¥ ‚îî‚îò ‚îî‚îÄ‚îò  ‚î¥‚îî‚îÄ‚îî‚îÄ‚îò‚îî‚îÄ‚îò‚îî‚îÄ‚îò‚î¥‚îî‚îÄ‚îÄ‚î¥‚îò‚îî‚îÄ‚îî‚îÄ‚îò‚îÄ‚îò
    // Process record(s) (mutate in-place) to wash away adapter-specific eccentricities.

    const createdRecords = result.map(r => r.new);
    try {
      _.each(createdRecords, (record) => {
        Helpers.query.processNativeRecord(record, WLModel, query.meta);
      });
    } catch (e) {
      return exits.error(e);
    }
    return exits.success({ records: createdRecords });
  },
});
